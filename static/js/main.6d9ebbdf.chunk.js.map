{"version":3,"sources":["Components/Scene3d.js","Components/ProductOptionControl.js","Components/Controls.js","App.js","index.js"],"names":["Scene3d","props","colors","red","Color3","blue","green","yellow","black","white","grey","brown","regions","tělo","id","alpha","beta","radius","šuplík","madlo1","madlo2","madlo3","moveCamera","e","TweenMax","to","camera","detail","ease","Power2","easeOut","changeColor","mesh","scene","getMeshByID","meshName","material","clone","diffuseColor","r","color","g","b","onResizeWindow","engine","resize","setEngine","stage","style","width","height","Engine","setScene","Scene","clearColor","setCamera","ArcRotateCamera","Math","PI","Tools","ToRadians","Vector3","attachControl","lowerRadiusLimit","upperRadiusLimit","lowerBetaLimit","upperBetaLimit","lowerAlphaLimit","upperAlphaLimit","loadModels","loader","AssetsManager","loadBikeModel","addMeshTask","onSuccess","t","runRenderLoop","render","HemisphericLight","onError","task","message","exception","console","log","bind","materialPlane","StandardMaterial","this","diffuseTexture","Texture","hasAlpha","specularColor","logo","MeshBuilder","CreatePlane","position","rotate","Axis","X","loadLogo","load","window","addEventListener","className","ref","el","Component","ProductOptionControl","state","bodyDefaultHeight","accordionOpen","toggleAccordion","optionBody","setState","visibility","clientHeight","event","CustomEvent","optionName","dispatchEvent","emitAccordionOpenEvent","emitSectionChangeEvent","onClick","optionValues","map","value","preventDefault","emitColorChangeEvent","Controls","options","option","cnt","App","optionNames","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.6d9ebbdf.chunk.js","sourcesContent":["// src/Components/Scene3d.js\n\n// Import our dependancies\nimport React, { Component } from \"react\";\nimport { TweenMax, Power2 } from \"gsap\";\n// Destructuring really helps clean up babylon projects\nimport {\n  Scene,\n  Engine,\n  AssetsManager,\n  ArcRotateCamera,\n  Vector3,\n  HemisphericLight,\n  Color3,\n  Tools,\n  MeshBuilder,\n  Texture,\n  StandardMaterial,\n  Axis\n} from \"babylonjs\";\n// Here we extend Reacts component class\nclass Scene3d extends Component {\n  colors = {\n    red: new Color3(0.5137, 0, 0),\n    blue: new Color3(0, 0, 0.5137),\n    green: new Color3(0, 0.5137, 0),\n    yellow: new Color3(0.5137, 0.5137, 0),\n    black: new Color3(0, 0, 0),\n    white: new Color3(1, 1, 1),\n    grey: new Color3(0.5, 0.5, 0.5),\n    brown: new Color3(0.329, 0.253, 0.166)\n  };\n  /*\n   * We add an object which contains a hash table\n   * of our regions. These nested objects\n   * contain the coordinates we will move\n   * the camera to if there key is\n   * selected. As well as an id\n   * to select individual meshs\n   */\n  regions = {\n    tělo: { id: \"Těleso1:1\", alpha: 5.481, beta: 0.899, radius: 57.482 },\n    šuplík: { id: \"Těleso1\", alpha: 5.827, beta: 1.426, radius: 70.0383 },\n    madlo1: { id: \"Těleso1:2\", alpha: 5.935, beta: 1.625, radius: 32.502 },\n    madlo2: { id: \"Těleso1:3\", alpha: 5.935, beta: 1.625, radius: 32.502 },\n    madlo3: { id: \"Těleso1:4\", alpha: 5.935, beta: 1.625, radius: 32.502 }\n  };\n\n  constructor(props) {\n    super(props);\n    // We bind our events to keep the proper \"this\" context.\n    this.moveCamera = this.moveCamera.bind(this);\n    this.changeColor = this.changeColor.bind(this);\n  }\n  /*\n   *  This function animates the movement of\n   *  the camera to our new region.\n   */\n  moveCamera = (e) => {\n    TweenMax.to(this.camera, 1, {\n      radius: this.regions[e.detail].radius,\n      alpha: this.regions[e.detail].alpha,\n      beta: this.regions[e.detail].beta,\n      ease: Power2.easeOut\n    });\n  };\n\n  changeColor = (e) => {\n    let mesh = this.scene.getMeshByID(this.regions[e.detail.meshName].id);\n    mesh.material = mesh.material.clone();\n    TweenMax.to(mesh.material.diffuseColor, 1, {\n      r: this.colors[e.detail.color].r,\n      g: this.colors[e.detail.color].g,\n      b: this.colors[e.detail.color].b\n    });\n  };\n  // Makes the canvas behave responsively\n  onResizeWindow = () => {\n    if (this.engine) {\n      this.engine.resize();\n    }\n  };\n  // Sets up our canvas tag for webGL scene\n  setEngine = () => {\n    this.stage.style.width = \"200%\";\n    this.stage.style.height = \"200%\";\n    this.engine = new Engine(this.stage);\n    this.stage.style.width = \"100%\";\n    this.stage.style.height = \"100%\";\n  };\n  // Creates the scene graph\n  setScene = () => {\n    this.scene = new Scene(this.engine);\n    /* \n      By default scenes have a blue background here we set \n      it to a cool gray color\n    */\n\n    this.scene.clearColor = new Color3(0.9, 0.9, 0.92);\n  };\n  /* \n     Adds camera to our scene. A scene needs a camera for anything to\n     be visible. Also sets up rotation Controls\n  */\n  setCamera = () => {\n    this.camera = new ArcRotateCamera(\n      \"Camera\",\n      Math.PI * 2,\n      Tools.ToRadians(80),\n      20,\n      new Vector3(0, 5, -5),\n      this.scene\n    );\n    this.camera.attachControl(this.stage, true);\n    this.camera.lowerRadiusLimit = 9;\n    this.camera.upperRadiusLimit = 200;\n    this.camera.lowerBetaLimit = this.camera.beta - Tools.ToRadians(80);\n    this.camera.upperBetaLimit = this.camera.beta + Tools.ToRadians(20);\n    this.camera.lowerAlphaLimit = this.camera.alpha - Tools.ToRadians(180);\n    this.camera.upperAlphaLimit = this.camera.alpha + Tools.ToRadians(180);\n  };\n\n  loadModels = () => {\n    /*\n     * the AssetManager class is responsible\n     * for loading files\n     */\n\n    let loader = new AssetsManager(this.scene);\n    // Arguments: \"ID\", \"Root URL\", \"URL Prefix\", \"Filename\"\n    let loadBikeModel = loader.addMeshTask(\"bike\", \"\", \"\", \"scene.babylon\");\n    /*\n     *  Loader is given a callback to run when the model has loaded\n     *  the variable t is our imported scene. You can use\n     *  it to examine all the mesh's loaded.\n     */\n\n    loadBikeModel.onSuccess = (t) => {\n      this.scene.getMeshByID(\"Těleso1\").material = this.scene\n        .getMeshByID(\"Těleso1\")\n        .material.clone();\n      this.scene.getMeshByID(\"Těleso1:1\").material = this.scene\n        .getMeshByID(\"Těleso1:1\")\n        .material.clone();\n      this.scene.getMeshByID(\"Těleso1:2\").material = this.scene\n        .getMeshByID(\"Těleso1:2\")\n        .material.clone();\n      this.scene.getMeshByID(\"Těleso1:3\").material = this.scene\n        .getMeshByID(\"Těleso1:3\")\n        .material.clone();\n      this.scene.getMeshByID(\"Těleso1:3\").material = this.scene\n        .getMeshByID(\"Těleso1:4\")\n        .material.clone();\n\n      this.scene.getMeshByID(\"Těleso1\").material.diffuseColor = this.colors[\n        \"grey\"\n      ];\n      this.scene.getMeshByID(\"Těleso1:1\").material.diffuseColor = this.colors[\n        \"grey\"\n      ];\n      this.scene.getMeshByID(\"Těleso1:2\").material.diffuseColor = this.colors[\n        \"grey\"\n      ];\n      this.scene.getMeshByID(\"Těleso1:3\").material.diffuseColor = this.colors[\n        \"black\"\n      ];\n      this.scene.getMeshByID(\"Těleso1:4\").material.diffuseColor = this.colors[\n        \"white\"\n      ];\n\n      // Start the animation loop once the model is loaded\n      this.engine.runRenderLoop(() => {\n        this.scene.render();\n      });\n      // The model came in a little dark so lets add some extra light\n      new HemisphericLight(\"light1\", new Vector3(0, 1, 0), this.scene);\n    };\n    // It also calls an Error callback if something goes wrong\n    loadBikeModel.onError = function (task, message, exception) {\n      console.log(message, exception);\n    };\n    // We return the fully configured loader\n    return loader;\n  };\n\n  loadLogo() {\n    let url = \"pxslogo.png\";\n    var materialPlane = new StandardMaterial(\"logo\", this.scene);\n    materialPlane.diffuseTexture = new Texture(url, this.scene);\n    materialPlane.diffuseTexture.hasAlpha = true;\n    materialPlane.specularColor = new Color3(0, 0, 0);\n\n    let logo = MeshBuilder.CreatePlane(\n      \"logo\",\n      { width: 470 / 20, height: 440 / 20 },\n      this.scene,\n      true\n    );\n    logo.position = new Vector3(0, 0, -5);\n    logo.rotate(Axis.X, Math.PI / 2);\n    logo.material = materialPlane;\n  }\n\n  //Build the scene when the component has been loaded.\n  componentDidMount() {\n    this.setEngine();\n    this.setScene();\n    this.setCamera();\n    this.loadLogo();\n    /*\n     *  the loader we return has a load method\n     *  attached that will initiate everything.\n     */\n    this.loadModels().load();\n    window.addEventListener(\"resize\", this.onResizeWindow);\n    // We can add our custom events just like any other DOM event\n    window.addEventListener(\"move-camera\", this.moveCamera);\n    window.addEventListener(\"change-color\", this.changeColor);\n  }\n  //Renderes our Canvas tag and saves a reference to it.\n  render() {\n    return <canvas className=\"scene\" ref={(el) => (this.stage = el)}></canvas>;\n  }\n}\n\n//returns the scene to be used by other components\nexport default Scene3d;\n","// src/Components/ProductOptionControl.js\nimport React, { Component } from \"react\";\nimport { TweenMax, Power2 } from \"gsap\";\n\nclass ProductOptionControl extends Component {\n  constructor(props) {\n    super(props);\n    // Set initial state\n    this.state = {\n      bodyDefaultHeight: null,\n      accordionOpen: false,\n    };\n    /*\n     * Bind event to this class. We will use this method in a\n     * click event listener and this is to keep the\n     * correct scope.\n     */\n    this.toggleAccordion = this.toggleAccordion.bind(this);\n    window.addEventListener(\"accordion-open\", () => {\n      if (this.state.accordionOpen) {\n        TweenMax.to(this.optionBody, 0.05, { height: 0, ease: Power2.easeOut });\n        this.setState({ accordionOpen: false });\n        this.optionBody.style.visibility = \"hidden\";\n      }\n    });\n  }\n\n  componentDidMount() {\n    /*\n     * We record the components initial height so it can be used\n     * make the accordion open and close. This way we know\n     * exactly how tall it needs to be.\n     */\n    this.setState({ bodyDefaultHeight: this.optionBody.clientHeight });\n    // Then we set its height to 0 to close it.\n    this.optionBody.style.height = 0;\n    this.optionBody.style.visibility = \"hidden\";\n  }\n\n  /*\n   * Add a new method to notify our scene that it\n   * needs to move the camera when a control\n   * is opened so we can get a better view\n   * of the area our control is editing.\n   */\n  emitSectionChangeEvent() {\n    // Arguments: Event Name, Event Options\n    let event = new CustomEvent(\"move-camera\", {\n      detail: this.props.optionName,\n    });\n    // Triggers the event on the window object\n    window.dispatchEvent(event);\n  }\n\n  emitColorChangeEvent(color) {\n    let event = new CustomEvent(\"change-color\", {\n      detail: {\n        meshName: this.props.optionName,\n        color,\n      },\n    });\n    window.dispatchEvent(event);\n  }\n\n  emitAccordionOpenEvent(color) {\n    let event = new CustomEvent(\"accordion-open\");\n    window.dispatchEvent(event);\n  }\n\n  toggleAccordion(e) {\n    /*\n     * When a user clicks the the title of the control we\n     * want to open the accordion, unless it is already\n     * open in which case we want to close it\n     */\n    if (!this.state.accordionOpen) {\n      /*\n       *  To open the accordion we set its height to the original\n       *  value we stored when the component mounted\n       */\n      this.setState({ accordionOpen: true });\n      this.optionBody.style.visibility = \"visible\";\n      TweenMax.to(this.optionBody, 0.05, {\n        height: this.state.bodyDefaultHeight,\n        ease: Power2.easeOut,\n      });\n      this.emitAccordionOpenEvent();\n      /*\n       * Call our new method here in the accordion\n       * event hook\n       */\n      this.emitSectionChangeEvent();\n    } else {\n      // back to 0 to close\n      TweenMax.to(this.optionBody, 0.05, { height: 0, ease: Power2.easeOut });\n      this.setState({ accordionOpen: false });\n      this.optionBody.style.visibility = \"hidden\";\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"productoption\">\n        {/*\n         *  The accordion header, this is always visible. We attach a click\n         *  event handler to it to handle opening and closing of\n         *  the accordion body\n         */}\n        <button onClick={this.toggleAccordion} className=\"productoption_header\">\n          {this.props.optionName}\n        </button>\n        {/*\n         *  We capture another reference to a DOM element here.\n         *  This is to read and modify the height so we\n         *  can make our accordion\n         */}\n        <div\n          className=\"productoption_body\"\n          ref={(el) => (this.optionBody = el)}\n        >\n          {/* Map over all the possible options and list them out */}\n          {this.props.optionValues.map((value) => {\n            return (\n              <button\n                key={value}\n                onClick={(e) => {\n                  e.preventDefault();\n                  this.emitColorChangeEvent(value);\n                }}\n                className=\"productoption_btn\"\n              >\n                {value}\n              </button>\n            );\n          })}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default ProductOptionControl;\n","// src/Components/Controls.js\nimport React, { Component } from 'react'\n// The Controls component will import out ProductOptionControl\nimport ProductOptionControl from './ProductOptionControl'\n\nclass Controls extends Component {\n\n\n  render() {\n    return (       \n        <div className=\"controls\" >\n        {/* We are going to take our options as an array of props.*/}\n        {this.props.options.map( (option, cnt) =>  {\n          return <ProductOptionControl key={option} optionName={option} optionValues={this.props.optionValues[cnt]} />\n        })}\n        </div>        \n    )\n  }\n}\n\nexport default Controls\n","// src/App.js\nimport React, { Component } from \"react\";\nimport \"./App.css\";\nimport Scene3d from \"./Components/Scene3d\";\nimport Controls from \"./Components/Controls\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      optionNames: [\"tělo\", \"šuplík\", \"madlo1\", \"madlo2\", \"madlo3\"],\n      optionValues: [\n        [\"white\", \"red\", \"blue\", \"green\", \"yellow\", \"black\", \"grey\", \"brown\"],\n        [\"white\", \"red\", \"blue\", \"green\", \"yellow\", \"black\", \"grey\", \"brown\"],\n        [\"white\", \"red\", \"blue\", \"green\", \"yellow\", \"black\", \"grey\", \"brown\"],\n        [\"white\", \"red\", \"blue\", \"green\", \"yellow\", \"black\", \"grey\", \"brown\"],\n        [\"white\", \"red\", \"blue\", \"green\", \"yellow\", \"black\", \"grey\", \"brown\"]\n      ]\n    };\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Scene3d />\n        <Controls\n          options={this.state.optionNames}\n          optionValues={this.state.optionValues}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n//import registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}